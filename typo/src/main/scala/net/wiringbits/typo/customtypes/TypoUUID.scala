/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package net
package wiringbits
package typo
package customtypes

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import anorm.TypeDoesNotMatch
import java.sql.Types
import java.util.UUID
import org.postgresql.jdbc.PgArray
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** UUID */
case class TypoUUID(value: UUID)

object TypoUUID {
  def apply(str: String): TypoUUID = TypoUUID(UUID.fromString(str))
  def randomUUID: TypoUUID = TypoUUID(UUID.randomUUID())
  implicit lazy val arrayColumn: Column[Array[TypoUUID]] = Column.nonNull[Array[TypoUUID]]((v1: Any, _) =>
    v1 match {
        case v: PgArray =>
         v.getArray match {
           case v: Array[?] =>
             Right(v.map(v => TypoUUID(v.asInstanceOf[UUID])))
           case other => Left(TypeDoesNotMatch(s"Expected one-dimensional array from JDBC to produce an array of TypoUUID, got ${other.getClass.getName}"))
         }
      case other => Left(TypeDoesNotMatch(s"Expected instance of org.postgresql.jdbc.PgArray, got ${other.getClass.getName}"))
    }
  )
  implicit lazy val arrayToStatement: ToStatement[Array[TypoUUID]] = ToStatement[Array[TypoUUID]]((s, index, v) => s.setArray(index, s.getConnection.createArrayOf("uuid", v.map(v => v.value))))
  implicit lazy val bijection: Bijection[TypoUUID, UUID] = Bijection[TypoUUID, UUID](_.value)(TypoUUID.apply)
  implicit lazy val column: Column[TypoUUID] = Column.nonNull[TypoUUID]((v1: Any, _) =>
    v1 match {
      case v: UUID => Right(TypoUUID(v))
      case other => Left(TypeDoesNotMatch(s"Expected instance of java.util.UUID, got ${other.getClass.getName}"))
    }
  )
  implicit def ordering(implicit O0: Ordering[UUID]): Ordering[TypoUUID] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[TypoUUID] = new ParameterMetaData[TypoUUID] {
    override def sqlType: String = "uuid"
    override def jdbcType: Int = Types.OTHER
  }
  implicit lazy val reads: Reads[TypoUUID] = Reads.uuidReads.map(TypoUUID.apply)
  implicit lazy val toStatement: ToStatement[TypoUUID] = ToStatement[TypoUUID]((s, index, v) => s.setObject(index, v.value))
  implicit lazy val writes: Writes[TypoUUID] = Writes.UuidWrites.contramap(_.value)
}
