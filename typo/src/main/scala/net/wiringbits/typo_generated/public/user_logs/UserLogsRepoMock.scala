/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package net
package wiringbits
package typo_generated
package public
package user_logs

import java.sql.Connection
import typo.dsl.DeleteBuilder
import typo.dsl.DeleteBuilder.DeleteBuilderMock
import typo.dsl.DeleteParams
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderMock
import typo.dsl.SelectParams
import typo.dsl.UpdateBuilder
import typo.dsl.UpdateBuilder.UpdateBuilderMock
import typo.dsl.UpdateParams

class UserLogsRepoMock(toRow: Function1[UserLogsRowUnsaved, UserLogsRow],
                       map: scala.collection.mutable.Map[UserLogsId, UserLogsRow] = scala.collection.mutable.Map.empty) extends UserLogsRepo {
  override def delete(userLogId: UserLogsId)(implicit c: Connection): Boolean = {
    map.remove(userLogId).isDefined
  }
  override def delete: DeleteBuilder[UserLogsFields, UserLogsRow] = {
    DeleteBuilderMock(DeleteParams.empty, UserLogsFields, map)
  }
  override def insert(unsaved: UserLogsRow)(implicit c: Connection): UserLogsRow = {
    if (map.contains(unsaved.userLogId))
      sys.error(s"id ${unsaved.userLogId} already exists")
    else
      map.put(unsaved.userLogId, unsaved)
    unsaved
  }
  override def insert(unsaved: UserLogsRowUnsaved)(implicit c: Connection): UserLogsRow = {
    insert(toRow(unsaved))
  }
  override def select: SelectBuilder[UserLogsFields, UserLogsRow] = {
    SelectBuilderMock(UserLogsFields, () => map.values.toList, SelectParams.empty)
  }
  override def selectAll(implicit c: Connection): List[UserLogsRow] = {
    map.values.toList
  }
  override def selectById(userLogId: UserLogsId)(implicit c: Connection): Option[UserLogsRow] = {
    map.get(userLogId)
  }
  override def selectByIds(userLogIds: Array[UserLogsId])(implicit c: Connection): List[UserLogsRow] = {
    userLogIds.flatMap(map.get).toList
  }
  override def update(row: UserLogsRow)(implicit c: Connection): Boolean = {
    map.get(row.userLogId) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.userLogId, row)
        true
      case None => false
    }
  }
  override def update: UpdateBuilder[UserLogsFields, UserLogsRow] = {
    UpdateBuilderMock(UpdateParams.empty, UserLogsFields, map)
  }
  override def upsert(unsaved: UserLogsRow)(implicit c: Connection): UserLogsRow = {
    map.put(unsaved.userLogId, unsaved)
    unsaved
  }
}
