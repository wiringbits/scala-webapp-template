/** File has been automatically generated by `typo`.
  *
  * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
  */
package net
package wiringbits
package typo_generated
package public
package background_jobs

import anorm.Column
import anorm.RowParser
import anorm.Success
import net.wiringbits.common.models.InstantCustom
import net.wiringbits.common.models.enums.BackgroundJobStatus
import net.wiringbits.common.models.enums.BackgroundJobType
import net.wiringbits.common.models.id.BackgroundJobId
import net.wiringbits.typo_generated.customtypes.TypoJsonb
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class BackgroundJobsRow(
    backgroundJobId: /* user-picked */ BackgroundJobId,
    `type`: /* user-picked */ BackgroundJobType,
    payload: TypoJsonb,
    status: /* user-picked */ BackgroundJobStatus,
    statusDetails: Option[String],
    errorCount: Option[Int],
    executeAt: /* user-picked */ InstantCustom,
    createdAt: /* user-picked */ InstantCustom,
    updatedAt: /* user-picked */ InstantCustom
)

object BackgroundJobsRow {
  implicit lazy val reads: Reads[BackgroundJobsRow] = Reads[BackgroundJobsRow](json =>
    JsResult.fromTry(
      Try(
        BackgroundJobsRow(
          backgroundJobId = json.\("background_job_id").as(implicitly[Reads[BackgroundJobId]]),
          `type` = json.\("type").as(implicitly[Reads[BackgroundJobType]]),
          payload = json.\("payload").as(TypoJsonb.reads),
          status = json.\("status").as(implicitly[Reads[BackgroundJobStatus]]),
          statusDetails = json.\("status_details").toOption.map(_.as(Reads.StringReads)),
          errorCount = json.\("error_count").toOption.map(_.as(Reads.IntReads)),
          executeAt = json.\("execute_at").as(implicitly[Reads[InstantCustom]]),
          createdAt = json.\("created_at").as(implicitly[Reads[InstantCustom]]),
          updatedAt = json.\("updated_at").as(implicitly[Reads[InstantCustom]])
        )
      )
    )
  )
  def rowParser(idx: Int): RowParser[BackgroundJobsRow] = RowParser[BackgroundJobsRow] { row =>
    Success(
      BackgroundJobsRow(
        backgroundJobId = row(idx + 0)(implicitly[Column[BackgroundJobId]]),
        `type` = row(idx + 1)(implicitly[Column[BackgroundJobType]]),
        payload = row(idx + 2)(TypoJsonb.column),
        status = row(idx + 3)(implicitly[Column[BackgroundJobStatus]]),
        statusDetails = row(idx + 4)(Column.columnToOption(Column.columnToString)),
        errorCount = row(idx + 5)(Column.columnToOption(Column.columnToInt)),
        executeAt = row(idx + 6)(implicitly[Column[InstantCustom]]),
        createdAt = row(idx + 7)(implicitly[Column[InstantCustom]]),
        updatedAt = row(idx + 8)(implicitly[Column[InstantCustom]])
      )
    )
  }
  implicit lazy val writes: OWrites[BackgroundJobsRow] = OWrites[BackgroundJobsRow](o =>
    new JsObject(
      ListMap[String, JsValue](
        "background_job_id" -> implicitly[Writes[BackgroundJobId]].writes(o.backgroundJobId),
        "type" -> implicitly[Writes[BackgroundJobType]].writes(o.`type`),
        "payload" -> TypoJsonb.writes.writes(o.payload),
        "status" -> implicitly[Writes[BackgroundJobStatus]].writes(o.status),
        "status_details" -> Writes.OptionWrites(Writes.StringWrites).writes(o.statusDetails),
        "error_count" -> Writes.OptionWrites(Writes.IntWrites).writes(o.errorCount),
        "execute_at" -> implicitly[Writes[InstantCustom]].writes(o.executeAt),
        "created_at" -> implicitly[Writes[InstantCustom]].writes(o.createdAt),
        "updated_at" -> implicitly[Writes[InstantCustom]].writes(o.updatedAt)
      )
    )
  )
}
