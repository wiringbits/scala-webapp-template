/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package net
package wiringbits
package typo_generated
package public
package user_tokens

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import net.wiringbits.typo_generated.customtypes.TypoUUID
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** Type for the primary key of table `public.user_tokens` */
case class UserTokensId(value: TypoUUID) extends AnyVal
object UserTokensId {
  implicit lazy val arrayColumn: Column[Array[UserTokensId]] = Column.columnToArray(column, implicitly)
  implicit lazy val arrayToStatement: ToStatement[Array[UserTokensId]] = TypoUUID.arrayToStatement.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[UserTokensId, TypoUUID] = Bijection[UserTokensId, TypoUUID](_.value)(UserTokensId.apply)
  implicit lazy val column: Column[UserTokensId] = TypoUUID.column.map(UserTokensId.apply)
  implicit def ordering(implicit O0: Ordering[TypoUUID]): Ordering[UserTokensId] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[UserTokensId] = new ParameterMetaData[UserTokensId] {
    override def sqlType: String = TypoUUID.parameterMetadata.sqlType
    override def jdbcType: Int = TypoUUID.parameterMetadata.jdbcType
  }
  implicit lazy val reads: Reads[UserTokensId] = TypoUUID.reads.map(UserTokensId.apply)
  implicit lazy val toStatement: ToStatement[UserTokensId] = TypoUUID.toStatement.contramap(_.value)
  implicit lazy val writes: Writes[UserTokensId] = TypoUUID.writes.contramap(_.value)
}
