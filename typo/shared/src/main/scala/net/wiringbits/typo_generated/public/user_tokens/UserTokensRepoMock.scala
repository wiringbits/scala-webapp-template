/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package net
package wiringbits
package typo_generated
package public
package user_tokens

import anorm.ToStatement
import java.sql.Connection
import net.wiringbits.common.models.UUIDCustom
import typo.dsl.DeleteBuilder
import typo.dsl.DeleteBuilder.DeleteBuilderMock
import typo.dsl.DeleteParams
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderMock
import typo.dsl.SelectParams
import typo.dsl.UpdateBuilder
import typo.dsl.UpdateBuilder.UpdateBuilderMock
import typo.dsl.UpdateParams

class UserTokensRepoMock(map: scala.collection.mutable.Map[/* user-picked */ UUIDCustom, UserTokensRow] = scala.collection.mutable.Map.empty) extends UserTokensRepo {
  override def delete(userTokenId: /* user-picked */ UUIDCustom)(implicit c: Connection): Boolean = {
    map.remove(userTokenId).isDefined
  }
  override def delete: DeleteBuilder[UserTokensFields, UserTokensRow] = {
    DeleteBuilderMock(DeleteParams.empty, UserTokensFields, map)
  }
  override def insert(unsaved: UserTokensRow)(implicit c: Connection): UserTokensRow = {
    if (map.contains(unsaved.userTokenId))
      sys.error(s"id ${unsaved.userTokenId} already exists")
    else
      map.put(unsaved.userTokenId, unsaved)
    unsaved
  }
  override def select: SelectBuilder[UserTokensFields, UserTokensRow] = {
    SelectBuilderMock(UserTokensFields, () => map.values.toList, SelectParams.empty)
  }
  override def selectAll(implicit c: Connection): List[UserTokensRow] = {
    map.values.toList
  }
  override def selectById(userTokenId: /* user-picked */ UUIDCustom)(implicit c: Connection): Option[UserTokensRow] = {
    map.get(userTokenId)
  }
  override def selectByIds(userTokenIds: Array[/* user-picked */ UUIDCustom])(implicit c: Connection, toStatement: ToStatement[Array[/* user-picked */ UUIDCustom]]): List[UserTokensRow] = {
    userTokenIds.flatMap(map.get).toList
  }
  override def update(row: UserTokensRow)(implicit c: Connection): Boolean = {
    map.get(row.userTokenId) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.userTokenId, row)
        true
      case None => false
    }
  }
  override def update: UpdateBuilder[UserTokensFields, UserTokensRow] = {
    UpdateBuilderMock(UpdateParams.empty, UserTokensFields, map)
  }
  override def upsert(unsaved: UserTokensRow)(implicit c: Connection): UserTokensRow = {
    map.put(unsaved.userTokenId, unsaved)
    unsaved
  }
}
