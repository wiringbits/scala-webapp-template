/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package org.foo.generated.public.users

import java.sql.Connection
import org.foo.generated.customtypes.TypoUnknownCitext
import typo.dsl.DeleteBuilder
import typo.dsl.DeleteBuilder.DeleteBuilderMock
import typo.dsl.DeleteParams
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderMock
import typo.dsl.SelectParams
import typo.dsl.UpdateBuilder
import typo.dsl.UpdateBuilder.UpdateBuilderMock
import typo.dsl.UpdateParams

class UsersRepoMock(toRow: Function1[UsersRowUnsaved, UsersRow],
                    map: scala.collection.mutable.Map[UsersId, UsersRow] = scala.collection.mutable.Map.empty) extends UsersRepo {
  override def delete(userId: UsersId)(implicit c: Connection): Boolean = {
    map.remove(userId).isDefined
  }
  override def delete: DeleteBuilder[UsersFields, UsersRow] = {
    DeleteBuilderMock(DeleteParams.empty, UsersFields, map)
  }
  override def insert(unsaved: UsersRow)(implicit c: Connection): UsersRow = {
    if (map.contains(unsaved.userId))
      sys.error(s"id ${unsaved.userId} already exists")
    else
      map.put(unsaved.userId, unsaved)
    unsaved
  }
  override def insert(unsaved: UsersRowUnsaved)(implicit c: Connection): UsersRow = {
    insert(toRow(unsaved))
  }
  override def select: SelectBuilder[UsersFields, UsersRow] = {
    SelectBuilderMock(UsersFields, () => map.values.toList, SelectParams.empty)
  }
  override def selectAll(implicit c: Connection): List[UsersRow] = {
    map.values.toList
  }
  override def selectById(userId: UsersId)(implicit c: Connection): Option[UsersRow] = {
    map.get(userId)
  }
  override def selectByIds(userIds: Array[UsersId])(implicit c: Connection): List[UsersRow] = {
    userIds.flatMap(map.get).toList
  }
  override def selectByUnique(email: TypoUnknownCitext)(implicit c: Connection): Option[UsersRow] = {
    map.values.find(v => email == v.email)
  }
  override def update(row: UsersRow)(implicit c: Connection): Boolean = {
    map.get(row.userId) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.userId, row)
        true
      case None => false
    }
  }
  override def update: UpdateBuilder[UsersFields, UsersRow] = {
    UpdateBuilderMock(UpdateParams.empty, UsersFields, map)
  }
  override def upsert(unsaved: UsersRow)(implicit c: Connection): UsersRow = {
    map.put(unsaved.userId, unsaved)
    unsaved
  }
}
