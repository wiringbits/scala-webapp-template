# https://www.playframework.com/documentation/latest/Configuration

# Swagger - be aware these are used at compile time
api.version = "beta"
swagger {
  api {
    basepath = "/"
    basepath = ${?SWAGGER_API_BASEPATH}

    # avoids setting the value to localhost
    # see https://github.com/dwickern/swagger-play/issues/9
    host = ""
    host = ${?SWAGGER_API_HOST}

    info = {
      contact = "template@wiringbits.net"
      title = "Scala webapp template's API"
      description = "The API for the Scala webapp template app"
    }
  }
}

play.i18n.langs = ["en"]

play.filters.hosts {
  allowed = ["localhost", "localhost:9000", "127.0.0.1:9000"]
  allowed += ${?APP_ALLOWED_HOST_1}
  allowed += ${?APP_ALLOWED_HOST_2}
}

play.http {
  # Important for production, it is used to sign sessions
  secret.key = "changeme"
  secret.key = ${?PLAY_APPLICATION_SECRET}

  errorHandler = "play.api.http.JsonHttpErrorHandler"

  session {
    cookieName = "__APP_SESSION__"

    # false by default because we use http locally, must be true in prod
    secure = false
    secure = ${?PLAY_SESSION_SECURE}

    # to secure the cookie, this value should be set in prod
    domain = null
    domain = ${?PLAY_SESSION_DOMAIN}

    # The session path
    # Must start with /.
    path = ${play.http.context}
    path = ${?PLAY_SESSION_DOMAIN_PATH}
  }
}

play.filters.disabled += "play.filters.csrf.CSRFFilter"
play.filters.enabled += "play.filters.cors.CORSFilter"

db.default {
  driver = "org.postgresql.Driver"
  host = "localhost:5432"
  database = "wiringbits_db"
  username = "postgres"
  password = "postgres"

  host = ${?POSTGRES_HOST}
  database = ${?POSTGRES_DATABASE}
  username = ${?POSTGRES_USERNAME}
  password = ${?POSTGRES_PASSWORD}

  url = "jdbc:postgresql://"${db.default.host}"/"${db.default.database}
}

play.evolutions {
  autoApply = true

  db.default {
    enabled = true
    # Important because when this is false, failed migrations won't get to the play_evolutions table
    # preventing us to fix them manually
    autocommit = true
  }
}

# Number of database connections
# See https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
fixedConnectionPool = 9

play.db {
  prototype {
    hikaricp.minimumIdle = ${fixedConnectionPool}
    hikaricp.maximumPoolSize = ${fixedConnectionPool}
  }
}

# Job queue sized to HikariCP connection pool
database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}

blocking.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    // very high bound to process lots of blocking operations concurrently
    fixed-pool-size = 5000
  }
}

play.modules.enabled += "net.wiringbits.modules.ApisModule"
play.modules.enabled += "net.wiringbits.modules.ConfigModule"
play.modules.enabled += "net.wiringbits.modules.ExecutorsModule"
play.modules.enabled += "net.wiringbits.modules.ClockModule"
play.modules.enabled += "net.wiringbits.modules.TasksModule"
play.modules.enabled += "net.wiringbits.modules.DataExplorerModule"

play.modules.enabled += "net.wiringbits.webapp.utils.admin.modules.AdminModule"
play.modules.enabled += "net.wiringbits.webapp.utils.admin.modules.ExecutorsModule"


email {
  senderAddress = "replace@replace.net"
  senderAddress = ${?EMAIL_SENDER_ADDRESS}

  # defines the provider used to send emails, valid values being "aws" or "none"
  provider = "none"
  provider = ${?EMAIL_PROVIDER}
}

userTokens {
  hmacSecret = "REPLACE ME"
  hmacSecret = ${?USER_TOKENS_HMAC_SECRET}

  emailVerification {
      # expiration time for email verification
      expirationTime = "24 hours"
      expirationTime = ${?USER_TOKENS_EMAIL_VERIFICATION_EXPIRATION_TIME}
  }

  resetPassword {
      # expiration time for email reset password
      expirationTime = "24 hours"
      expirationTime = ${?USER_TOKENS_RESET_PASSWORD_EXPIRATION_TIME}
  }
}

aws {
  region = "us-west-2"
  region = ${?AWS_REGION}

  accessKeyId = REPLACE_ME
  accessKeyId = ${?AWS_ACCESS_KEY_ID}

  secretAccessKey = REPLACE_ME
  secretAccessKey = ${?AWS_SECRET_ACCESS_KEY}
}

webapp {
  host = "http://localhost:8080"
  host = ${?WEBAPP_HOST}
}

recaptcha {
  # secret key only used for test purposes
  secretKey = "6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe"
  secretKey = ${?RECAPTCHA_SECRET_KEY}
  siteKey = "6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI"
  siteKey = ${?RECAPTCHA_SITE_KEY}
}

notificationsTask {
  # the NotificationsTask will run every time the period is fullfilled
  interval = 1 minutes
  interval = ${?NOTIFICATIONS_TASK_INTERVAL}
}